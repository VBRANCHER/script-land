-- MySQL Script generated by MySQL Workbench
-- 06/21/18 20:41:17
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema bd_scriptland
-- -----------------------------------------------------
-- Data de criação: 14/06/2018
-- Data de atualização: 14/06/2018
-- 
-- Autores: Vinícius Almada
--                Eduardo Baroni
--                Paulo Henrique Costa
-- 
-- Descrição: Banco de dados onde será armazenado todos os dados do jogo Script Land.

-- -----------------------------------------------------
-- Schema bd_scriptland
--
-- Data de criação: 14/06/2018
-- Data de atualização: 14/06/2018
-- 
-- Autores: Vinícius Almada
--                Eduardo Baroni
--                Paulo Henrique Costa
-- 
-- Descrição: Banco de dados onde será armazenado todos os dados do jogo Script Land.
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `bd_scriptland` DEFAULT CHARACTER SET utf8 ;
USE `bd_scriptland` ;

-- -----------------------------------------------------
-- Table `bd_scriptland`.`jogadores`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bd_scriptland`.`jogadores` (
  `id` INT ZEROFILL UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Identificar o jogador.',
  `nome` VARCHAR(12) NOT NULL COMMENT 'Nome verdadeiro do jogador.\nSomente o primeiro nome.',
  `nome_usuario` VARCHAR(25) NOT NULL COMMENT 'Nome que aparecerá nos menus do jogo e será utilizado para fazer Login.',
  `email` VARCHAR(70) NOT NULL COMMENT 'E-mail para recuperação da conta e impedir que o mesmo jogador crie várias contas com o mesmo e-mail.',
  `senha` CHAR(32) NOT NULL COMMENT 'Senha usada para poder se logar com o nome_usuario. Criptografada.',
  `data_registro` DATE NOT NULL COMMENT 'Armazena a data que o usuário se cadastrou.',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC))
ENGINE = InnoDB
COMMENT = 'Tabela destinada a armazenar as informações dos jogadores.';


-- -----------------------------------------------------
-- Table `bd_scriptland`.`logins`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bd_scriptland`.`logins` (
  `id` INT UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT COMMENT 'Identificação do Login.',
  `data` DATE NOT NULL COMMENT 'Salva a data que o jogador se logou.',
  `hora` TIME NOT NULL COMMENT 'Salva a hora que o jogador se logou.',
  `jogadores_id` INT ZEROFILL UNSIGNED NOT NULL COMMENT 'Identifica os jogadores.',
  PRIMARY KEY (`id`),
  INDEX `fk_logins_jogadores1_idx` (`jogadores_id` ASC),
  CONSTRAINT `fk_logins_jogadores1`
    FOREIGN KEY (`jogadores_id`)
    REFERENCES `bd_scriptland`.`jogadores` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Tabela destinada a controlar os logins dos jogadores.';


-- -----------------------------------------------------
-- Table `bd_scriptland`.`perfis`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bd_scriptland`.`perfis` (
  `id` INT UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT COMMENT 'Identificador de perfil.',
  `personagem` TINYINT(1) NOT NULL COMMENT 'Personagem selecionado:\n1 = Personagem 1\n2 = Personagem 2\n3 = Personagem 3\n4 = Personagem 4',
  `moedas` SMALLINT UNSIGNED NOT NULL COMMENT 'Moedas que o jogador possui no total.',
  `ponto_salvo` TINYINT(2) UNSIGNED NOT NULL COMMENT 'Em qual ponto salvo o jogador interagiu por último:\n1 = Ponto salvo 1\n2 = Ponto salvo 2\n3 = Ponto salvo 3\nE assim por diante.',
  `tempo_jogado` TIME NOT NULL COMMENT 'Tempo total que o jogador passou jogando logado.',
  `vida` TINYINT(1) UNSIGNED NOT NULL COMMENT 'Quantas vidas o jogador possui no momento.',
  `pontos` INT UNSIGNED NOT NULL COMMENT 'Pontuação total que o jogador conseguiu ao longo do jogo, o tempo restante de uma pergunta será convertido em pontos.',
  `jogadores_id` INT ZEROFILL UNSIGNED NOT NULL COMMENT 'Identifica os jogadores.',
  PRIMARY KEY (`id`),
  INDEX `fk_perfis_jogadores1_idx` (`jogadores_id` ASC),
  CONSTRAINT `fk_perfis_jogadores1`
    FOREIGN KEY (`jogadores_id`)
    REFERENCES `bd_scriptland`.`jogadores` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Tabela destinada a armazenar o progresso do perfil do usuário.';


-- -----------------------------------------------------
-- Table `bd_scriptland`.`itens`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bd_scriptland`.`itens` (
  `id` INT UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT COMMENT 'Identificar o item.',
  `nome` VARCHAR(45) NOT NULL COMMENT 'O nome dado ao respectivo item.',
  `descricao` VARCHAR(100) NOT NULL COMMENT 'Descrição do item.',
  `qtd_max` TINYINT(2) UNSIGNED NOT NULL COMMENT 'Quantidade máxima de itens que o jogador pode comprar deste item.',
  PRIMARY KEY (`id`))
ENGINE = InnoDB
COMMENT = 'Tabela destinada a armazenar os itens que o jogo oferece ao jogador.';


-- -----------------------------------------------------
-- Table `bd_scriptland`.`viloes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bd_scriptland`.`viloes` (
  `nome` VARCHAR(12) NOT NULL COMMENT 'Nome do vilão.',
  `materias` VARCHAR(17) NOT NULL COMMENT 'Matéria (--) do vilão.',
  `img` VARCHAR(255) NOT NULL COMMENT 'URL da imagem que contém a pergunta.',
  PRIMARY KEY (`nome`),
  UNIQUE INDEX `nome_UNIQUE` (`nome` ASC))
ENGINE = InnoDB
COMMENT = 'Tabela destinada a armazenar os vilões e suas respectivas matérias. ';


-- -----------------------------------------------------
-- Table `bd_scriptland`.`perguntas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bd_scriptland`.`perguntas` (
  `id` INT UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT COMMENT 'Identifica a pergunta.',
  `enunciado` VARCHAR(75) NOT NULL COMMENT 'Enunciado na qual o vilão irá atacar com sua pergunta.\n',
  `tempo` TIME NOT NULL COMMENT 'Tempo que o jogador terá que responder a pergunta.\n',
  `alt_1` VARCHAR(50) NOT NULL COMMENT 'Alternativa 1 do enunciado.',
  `alt_2` VARCHAR(50) NOT NULL COMMENT 'Alternativa 2 do enunciado.\n',
  `alt_3` VARCHAR(50) NOT NULL COMMENT 'Alternativa 3 do enunciado.',
  `alt_correta` VARCHAR(50) NOT NULL COMMENT 'Alternativa correta do enunciado.\n',
  `viloes_nome` VARCHAR(12) NOT NULL COMMENT 'Identifica o nome dos vilões.',
  PRIMARY KEY (`id`),
  INDEX `fk_perguntas_viloes1_idx` (`viloes_nome` ASC),
  CONSTRAINT `fk_perguntas_viloes1`
    FOREIGN KEY (`viloes_nome`)
    REFERENCES `bd_scriptland`.`viloes` (`nome`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Tabela destinada a armazenar as perguntas e suas alternativas.';


-- -----------------------------------------------------
-- Table `bd_scriptland`.`perfis_has_itens`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bd_scriptland`.`perfis_has_itens` (
  `perfis_id` INT UNSIGNED ZEROFILL NOT NULL COMMENT 'Identifica os perfis.',
  `itens_id` INT UNSIGNED ZEROFILL NOT NULL COMMENT 'Identifica os itens do jogo.',
  `quantidade` TINYINT(2) UNSIGNED NOT NULL COMMENT 'Quantidade máxima que o jogador pode levar de uma vez com ele.',
  PRIMARY KEY (`perfis_id`, `itens_id`),
  INDEX `fk_perfis_has_itens_itens1_idx` (`itens_id` ASC),
  INDEX `fk_perfis_has_itens_perfis1_idx` (`perfis_id` ASC),
  CONSTRAINT `fk_perfis_has_itens_perfis1`
    FOREIGN KEY (`perfis_id`)
    REFERENCES `bd_scriptland`.`perfis` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_perfis_has_itens_itens1`
    FOREIGN KEY (`itens_id`)
    REFERENCES `bd_scriptland`.`itens` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Tabela destinada arrmazenar os itens carregados pelo jogardor.';


-- -----------------------------------------------------
-- Table `bd_scriptland`.`perguntas_has_perfis`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bd_scriptland`.`perguntas_has_perfis` (
  `perguntas_id` INT UNSIGNED ZEROFILL NOT NULL COMMENT 'Identifica as perguntas que o jogador respondeu.',
  `perfis_id` INT UNSIGNED ZEROFILL NOT NULL COMMENT 'Identifica os perfil do jogador que respondeu a pergunta.',
  `resposta` TINYINT(1) UNSIGNED NOT NULL COMMENT 'Armazena a resposta na qual o usuário obteve para responder.\n',
  `tempo_jogado` TIME NOT NULL COMMENT 'Armazena o tempo total na qual o usuário obteve para responder.\n',
  PRIMARY KEY (`perguntas_id`, `perfis_id`),
  INDEX `fk_perguntas_has_perfis_perfis1_idx` (`perfis_id` ASC),
  INDEX `fk_perguntas_has_perfis_perguntas1_idx` (`perguntas_id` ASC),
  CONSTRAINT `fk_perguntas_has_perfis_perguntas1`
    FOREIGN KEY (`perguntas_id`)
    REFERENCES `bd_scriptland`.`perguntas` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_perguntas_has_perfis_perfis1`
    FOREIGN KEY (`perfis_id`)
    REFERENCES `bd_scriptland`.`perfis` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Tabela destinada a armazenar as respostas que o jogador dá e o tempo jogado. ';


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
